- Linear Layout: Cho phép sắp xếp giao diện theo chiều ngang hoặc chiều dọc 
	+ Các thuộc tính quan trọng: 
		.orientation: *Vertical: dọc
			      *Horizontal: ngang
		.background: set mau nen
		.id 
		.Layout_width, Layout_height: Xet chieu rong chieu cao cho View group
		.wrap_content, match_parent 
		.gravity: sap xep cac thanh phan tren view, view group
		.ignoreGravity:"@id": loại bỏ gravity
		.margin: can le layout so voi view chua no
		.padding: viet tren class cha quy dinh le noi dung trong no
		.weight: chia theo trong so
		.weightSum: chia chieu cao thanh X phan

- Table Layout: Cho phép chúng ta sắp xếp các view trên giao diện dòng và cột
	+ Index cột lấy từ 0
	+ Thuộc tính: 
		. layout_column: di chuyển cột
		. layout_span: gộp cột
		. stretchColumns = "*" dàn đều View vừa màn hình

- Relative Layout: 
	+ là một layout trong đó chúng ta có thể sắp xếp view theo vị trí của các view 
	+ gốc tọa độ bắt đầu đỉnh bên 
	+ Thuộc tính: 
		.align: thiết lập vị trí giữa view con và view cha (layout_alignParrentBottom = "true")
		.center: Căn giữa 
		.below || above || toRightOf || toLeftOf: căn vị trí của view con - view con (layput_below = "@id/X")
		.layout_alignRight: cạnh bên phải trùng nhau

- Constrain Layout: Là 1 ViewGoup làm việc dựa trên việc ràng buộc giữa các View
	+ Khi ràng buộc phải ràng buộc đủ 2 chiều dọc và ngang 
	+ Nếu ko có thì view đặt tại điểm gốc zero

- FrameLayout: là loại View cơ sở, nó là loại Layout đơn giản nhất. 
	+ Mặc dù nó có thể chứa nhiều View con bên trong, nhưng mục đích chính thiết kế ra nó để chứa một View, từ đó nó trở thành cơ sở để tạo ra các View khác phức tạp hơn. 
	+ Khi thiết kế Layout chứa nhiều View thì không nên sử dụng layout này, vì nó quá đơn giản việc bố cục các View con trong nó rất khó khăn (nó không có các tính năng điều khiển vị trí View con sao cho việc độc lập về màn hình được đảm bảo).
